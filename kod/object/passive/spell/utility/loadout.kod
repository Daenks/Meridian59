% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Loadout is UtilitySpell

constants:
   include blakston.khd

resources:

   include loadout.lkod

   loadout_not_safe = "You must be in a safe area to cast loadout."
   loadout_not_guilded = "You must be guilded to cast loadout."
   loadout_rank_too_low = "You are not high enough rank to cast loadout."
   loadout_no_hall = "With no guild hall to link with, the loadout spell fails."

   loadout_items_not_found = "The chests did not contain any %s."
   loadout_items_not_enough = "The chests did not contain enough %s."
   loadout_item_not_found = "The chests did not contain %s%s."
   loadout_cant_carry_all = "You can't carry all the %s."
   loadout_cant_carry_one = "You can't carry %s%s."
   loadout_cant_carry_any = "You can't carry any %s."

   loadout_cast = "You activate your link with your guild hall's storage."
   loadout_not_set = "You currently have no inventory preferences set."

   loadout_name_rsc = "loadout"
   loadout_icon_rsc = imend.bgf
   loadout_desc_rsc = \
      "Attempts to translocate gear and reagents from your guild hall's "
      "storage, according to preferences previously registered with "
      "Frular's office."

classvars:

   vrName = loadout_name_rsc
   vrIcon = loadout_icon_rsc
   vrDesc = loadout_desc_rsc

   viCast_time = 20000

   viSpell_num = SID_LOADOUT
   viSpell_level = 1
   viSchool = SS_KRAANAN
   viMana = 0
   viSpellExertion = 0
   viChance_To_Increase = 5

properties:

messages:

   ResetReagents()
   {
      plReagents = $;

      return;
   }

   CanPayCosts(who = $)
   {
      if Send(who,@GetGuild) = $
      {
         Send(who,@MsgSendUser,#message_rsc=loadout_not_guilded);

         return FALSE;
      }

      if Send(Send(who,@GetGuild),@GetRank,#who=who) = RANK_APPRENTICE
      {
         Send(who,@MsgSendUser,#message_rsc=loadout_rank_too_low);

         return FALSE;
      }

      if Send(Send(who,@GetGuild),@GetGuildHall) = $
      {
         Send(who,@MsgSendUser,#message_rsc=loadout_no_hall);

         return FALSE;
      }

      if NOT Send(Send(who,@GetOwner),@CheckRoomFlag,#flag=ROOM_NO_COMBAT)
      {
         Send(who,@MsgSendUser,#message_rsc=loadout_not_safe);

         return FALSE;
      }
      
      if Send(who,@GetLoadoutList) = $
      {
         Send(who,@MsgSendUser,#message_rsc=loadout_not_set);

         return FALSE;
      }

      propagate;
   }

   CastSpell(who = $, lTargets = $)
   {
      local i, n, countHolding, countNeeded, findAmount, class, number, bFound,
            lLoadout_list, lInventory, lDoNotSearch, school, oItem, lDRobes,
            lLRobes;

      lLoadout_list = Send(who,@GetLoadoutList);
      lLRobes = $;
      lDRobes = $;
      lInventory = Send(who,@GetHolderPassive);
      lDoNotSearch = $;

      Send(who,@MsgSendUser,#message_rsc=loadout_cast);

      foreach i in lLoadout_list
      {
         class = First(i);

         % Skip this item if we shouldn't search for it.
         if FindListElem(lDoNotSearch, class)
         {
            continue;
         }

         % Number can be -1 for single-stack items, school number for
         % disciple robes, or the number of a saved stackable item.
         number = Nth(i,2);
         bFound = FALSE;

         % Special case for Disciple Robes, which are implemented
         % without separate classes.
         if class = &LightDiscipleRobe
         {
            lLRobes = Cons(number, lLRobes);

            continue;
         }
         if class = &DiscipleRobe
         {
            lDRobes = Cons(number, lDRobes);

            continue;
         }

         if number = -1
         {
            % Don't need to search for it again.
            lDoNotSearch = Cons(class,lDoNotSearch);

            % Check how many we have.
            countHolding = Send(who,@CountHoldingHowMany,#class=class);

            countNeeded = 0;
            foreach n in lLoadout_list
            {
               if First(n) = class
               {
                  ++countNeeded;
               }
            }
            findAmount = countNeeded - countHolding;
            while (findAmount-- > 0)
            {
               bFound = Send(self,@GetSingleItemFromHallChest,#who=who,
                              #class=class);
               if NOT bFound
               {
                  break;
               }
            }
         }
         else
         {
            % Look for numbered item. If we find it, check how many of it
            % we have. Get the remainder of (needed - have).
            oItem = GetListElemByClass(lInventory,class);
            if (oItem <> $)
            {
               countHolding = Send(oItem,@GetNumber);
            }
            else
            {
               countHolding = 0;
            }

            if (countHolding < number)
            {
               Send(self,@GetNumberItemFromHallChest,#who=who,#class=class,
                     #number=number-countHolding);
            }
         }
      }

      % Now deal with disciple robes. If lDRobes and lLRobes are both $,
      % just propagate.
      if lDRobes = $ AND lLRobes = $
      {
         propagate;
      }

      % For each robe the player currently has, remove it if present in
      % the robe loadout lists.
      foreach oItem in lInventory
      {
         if IsClass(oItem,&LightDiscipleRobe)
         {
            if lLRobes = $
            {
               continue;
            }
            school = Send(oItem,@GetSchool);
            if FindListElem(lLRobes, school)
            {
               lLRobes = DelListElem(lLRobes, school);
            }
         }
         else if IsClass(oItem,&DiscipleRobe)
         {
            if lDRobes = $
            {
               continue;
            }
            school = Send(oItem,@GetSchool);
            if FindListElem(lDRobes, school)
            {
               lDRobes = DelListElem(lDRobes, school);
            }
         }
      }

      % lDRobes and lLRobes should now contain a list of robes we actually
      % need, so try get them from the chest.
      foreach school in lDRobes
      {
         Send(self,@GetDiscipleRobeFromHallChest,#who=who,#school=school);
      }
      foreach school in lLRobes
      {
         Send(self,@GetDiscipleRobeFromHallChest,#who=who,#school=school,
               #class=&LightDiscipleRobe);
      }

      propagate;
   }

   GetDiscipleRobeFromHallChest(who=$,school=SS_RIIJA,class=&DiscipleRobe)
   {
      local i, oBox, oItem, oGuild, oGuildHall, bFound;

      oGuild = Send(who,@GetGuild);
      oGuildHall = Send(oGuild,@GetGuildHall);
      bFound = FALSE;

      foreach i in Send(oGuildHall,@GetHolderActive)
      {
         oBox = First(i);
         if IsClass(oBox,&StorageBox)
         {
            foreach oItem in Send(oBox,@GetHolderPassive)
            {
               if (GetClass(oItem) = class
                  AND Send(oItem,@GetSchool) = school)
               {
                  bFound = TRUE;
                  if Send(who,@ReqNewHold,#what=oItem)
                  {
                     Send(who,@NewHold,#what=oItem);

                     return TRUE;
                  }
                  else
                  {
                     Send(who,@MsgSendUser,#message_rsc=loadout_cant_carry_one,
                           #parm1=Send(oItem,@GetIndef),
                           #parm2=Send(oItem,@GetTrueName));

                     return FALSE;
                  }
               }
            }
         }
      }

      if NOT bFound
      {
         % Get item template for message.
         oItem = Send(SYS,@FindTemplateItemByClass,#cClass=class);
         if (oItem <> $)
         {
            Send(who,@MsgSendUser,#message_rsc=loadout_item_not_found,
                  #parm1=Send(oItem,@GetIndef),
                  #parm2=Send(oItem,@GetTrueName));
         }
      }

      return FALSE;
   }

   GetSingleItemFromHallChest(who=$,class=&Item)
   {
      local i, oItem, oBox, oGuild, oGuildHall, bFound;

      oGuild = Send(who,@GetGuild);
      oGuildHall = Send(oGuild,@GetGuildHall);
      bFound = FALSE;

      foreach i in Send(oGuildHall,@GetHolderActive)
      {
         oBox = First(i);
         if IsClass(oBox,&StorageBox)
         {
            foreach oItem in Send(oBox,@GetHolderPassive)
            {
               if IsClass(oItem,class)
               {
                  bFound = TRUE;
                  if Send(who,@ReqNewHold,#what=oItem)
                  {
                     Send(who,@NewHold,#what=oItem);

                     return TRUE;
                  }
                  else
                  {
                     Send(who,@MsgSendUser,#message_rsc=loadout_cant_carry_one,
                           #parm1=Send(oItem,@GetIndef),
                           #parm2=Send(oItem,@GetTrueName));

                     return FALSE;
                  }
               }
            }
         }
      }

      if NOT bFound
      {
         % Get item template for message.
         oItem = Send(SYS,@FindTemplateItemByClass,#cClass=class);
         if (oItem <> $)
         {
            Send(who,@MsgSendUser,#message_rsc=loadout_item_not_found,
                  #parm1=Send(oItem,@GetIndef),
                  #parm2=Send(oItem,@GetTrueName));
         }
      }

      return FALSE;
   }

   GetNumberItemFromHallChest(who=$,class=&Item,number=-1)
   {
      local i, oBox, oItem, oGuild, oGuildHall, bFound, oSplit, iCanHold,
            iNumInChest, iGetNumber, bSentErrorMsg;

      if number < 1
      {
         return;
      }

      oGuild = Send(who,@GetGuild);
      oGuildHall = Send(oGuild,@GetGuildHall);

      bFound = FALSE;
      bSentErrorMsg = FALSE;

      foreach i in Send(oGuildHall,@GetHolderActive)
      {
         iGetNumber = number;
         oBox = First(i);
         if IsClass(oBox,&StorageBox)
         {
            oItem = GetListElemByClass(Send(oBox,@GetHolderPassive), class);
            if oItem <> $
            {
               iCanHold = Send(who,@GetNumberCanHold,#what=oItem);
               iNumInChest = Send(oItem,@GetNumber);
               bFound = TRUE;

               if iGetNumber > iNumInChest
               {
                  iGetNumber = iNumInChest;
               }

               if iCanhold <> $
                  AND iGetNumber > iCanHold
               {
                  if iCanHold > 0
                  {
                     if NOT bSentErrorMsg
                     {
                        Send(who,@MsgSendUser,#message_rsc=loadout_cant_carry_all,
                              #parm1=Send(oItem,@GetPluralName));
                        bSentErrorMsg = TRUE;
                     }
                  }
                  else
                  {
                     if NOT bSentErrorMsg
                     {
                        Send(who,@MsgSendUser,#message_rsc=loadout_cant_carry_any,
                             #parm1=Send(oItem,@GetPluralName));
                        bSentErrorMsg = TRUE;
                     }
                     return;
                  }
                  iGetNumber = iCanHold;
               }

               if iGetNumber > 0
               {
                  oSplit = Send(oItem,@Split,#number=iGetNumber);
                  if Send(oItem,@ReqNewOwner,#what=oSplit)
                  {
                     Send(who,@NewHold,#what=oSplit);
                     number = number - iGetNumber;
                     if number < 1
                     {
                        return;
                     }
                  }
                  else
                  {
                     Send(oItem,@AddNumber,#number=iGetNumber);
                  }
               }
            }
         }
      }

      if NOT bFound
      {
         % Get item template for message.
         oItem = Send(SYS,@FindTemplateItemByClass,#cClass=class);
         if (oItem <> $)
         {
            Send(who,@MsgSendUser,#message_rsc=loadout_items_not_found,
                  #parm1=Send(oItem,@GetPluralName));
         }
      }
      else if number > 0
      {
         % Get item template for message.
         oItem = Send(SYS,@FindTemplateItemByClass,#cClass=class);
         if (oItem <> $)
         {
            Send(who,@MsgSendUser,#message_rsc=loadout_items_not_enough,
                  #parm2=Send(oItem,@GetPluralName));
         }
      }

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
